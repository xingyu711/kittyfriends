{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","actions.js","api/api.js","constants.js","containers/App.js","serviceWorker.js","reducer.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","kitties","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","setRequestKitties","dispatch","link","fetch","then","response","json","data","payload","catch","App","onRequestKitties","searchField","onSearchChange","isPending","filteredKitties","filter","kitty","toLowerCase","includes","React","connect","searchKitties","requestKitties","event","target","value","Boolean","window","location","hostname","match","initialStateSearch","initialStateRequest","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleWare","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.fca7f1d3.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ id, name, email }) => {\nreturn (\n  <div className='dib pa4 ma3 grow bw3 shadow-4 avenir navy'>\n    <img alt=\"robots\" src={`https://robohash.org/${id}?set=set4`} />\n    <div>\n      <h2>{name}</h2>\n      <p>{email}</p>\n    </div>\n  </div>\n  );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ kitties }) => {\n  return (\n    <div>\n        {\n          kitties.map((user, i) => {\n            return (\n              <Card\n                key={kitties[i].id} \n                id={kitties[i].id} \n                name={kitties[i].name} \n                email={kitties[i].email}\n                />\n            );\n          })\n        }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ( {searchChange} ) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 bg-transparent ba bw1 b--black-10' \n        type='search' \n        placeholder='search kitties' \n        onChange={searchChange} \n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{overflowY: 'scroll', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true })\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h2>Sorry, something goes wrong. We'll fix it ASAP.</h2>\n    }\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundry;","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_KITTIES_PENDING,\n  REQUEST_KITTIES_SUCCESS,\n  REQUEST_KITTIES_FAILED\n} from './constants';\n\nimport { apiCall } from './api/api'\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n})\n\nexport const setRequestKitties = () => (dispatch) => {\n    dispatch({ type: REQUEST_KITTIES_PENDING });\n    apiCall('https://jsonplaceholder.typicode.com/users')\n      .then(data => dispatch({ type: REQUEST_KITTIES_SUCCESS, payload: data }))\n      .catch(error => dispatch({ type: REQUEST_KITTIES_FAILED, payload: error }))\n}","export const apiCall = (link) => fetch(link).then(response => response.json())","export const CHANGE_SEARCH_FIELD  = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_KITTIES_PENDING = 'REQUEST_KITTIES_PENDING';\nexport const REQUEST_KITTIES_SUCCESS = 'REQUEST_KITTIES_SUCCESS';\nexport const REQUEST_KITTIES_FAILED = 'REQUEST_KITTIES_FAILED';","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll'\nimport ErrorBoundry from '../components/ErrorBoundry';\n\nimport { setSearchField, setRequestKitties } from '../actions';\n\nimport './App.css'\n\n\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchKitties.searchField,\n    kitties: state.requestKitties.kitties,\n    isPending: state.requestKitties.isPending,\n    error: state.requestKitties.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestKitties: () => dispatch(setRequestKitties())\n  }\n}\n  \nclass App extends React.Component {\n\n  componentDidMount() {\n    this.props.onRequestKitties();\n  }\n\n  render() {\n    const { searchField, onSearchChange, kitties, isPending } = this.props;\n    const filteredKitties = kitties.filter(kitty => {\n      return kitty.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    \n    return isPending ?\n      <h1 className='tc'>Loading</h1> :\n      (\n        <div className='tc'>\n          <h1 className='f1'>Kittyfriends</h1>\n          <SearchBox searchChange = { onSearchChange }/>\n          <br />\n          <Scroll>\n            <ErrorBoundry>\n              <CardList kitties = { filteredKitties } /> \n            </ErrorBoundry>\n          </Scroll>\n        </div>\n      )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_KITTIES_PENDING,\n  REQUEST_KITTIES_SUCCESS,\n  REQUEST_KITTIES_FAILED\n} from './constants';\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nconst initialStateRequest = {\n  isPending: false,\n  kitties: [],\n  error: ''\n}\n\nexport const searchKitties = (state=initialStateSearch, action={}) => {\n  switch(action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n}\n\nexport const requestKitties = (state=initialStateRequest, action={}) => {\n  switch(action.type) {\n    case REQUEST_KITTIES_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_KITTIES_SUCCESS:\n      return Object.assign({}, state, { kitties: action.payload, isPending: false});\n    case REQUEST_KITTIES_FAILED:\n      return Object.assign({}, state, { error: action.payload, isPending: false });\n    default:\n      return state;\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunkMiddleWare from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport 'tachyons';\n\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { searchKitties, requestKitties } from './reducer';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchKitties, requestKitties })\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleWare, logger));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}